import java.io.IOException;

/**
 * This isn't done yet 
 * 
 * @author Matthew Benson
 *
 */
public class Compiler {

	/**
	 * This isn't done
	 * @param args
	 */
	public static void main(String[] args) {
		
		boolean verbose = false;
		boolean runAfterCompile = false;
		boolean displayHelp = false;
		
		for(int i = 1; i < args.length; i++) {
			if(args[i].equalsIgnoreCase("-v")) {
				verbose = true;//set verbose
			} 
			if(args[i].equalsIgnoreCase("-r")) {
				runAfterCompile = true;//set run after compiler
			}
			if(args[i].equalsIgnoreCase("-h") ||args[i].equalsIgnoreCase("-help")) {
				displayHelp = true;//set displayHelp - this will print help then exit
			}
		}
		
		if(displayHelp || args.length == 0) {
			System.out.println("Usage: java -jar MDBCompiler.jar <source file> <options>");
			System.out.println("Possible options:");
			System.out.println("-v \t\t\t Output messages about what the compiler is doing");
			System.out.println("-r \t\t\t Runs the output file if compiling is successful");
			System.out.println("-h or -help \t\t Display this message");
			return;
		}
			
		Parser parser = new Parser(args[0]);//first argument should be input file
		
		if(!parser.parseInput(verbose)) { return; }
		
		//always generate the runnable code with mini after creating intermediate code file 
		String[] miniArgs = {args[0]+".asm"};
		try {
			mini.run(miniArgs, verbose);//run mini using our .asm file generated by the compiler
		} catch (IOException e) {
			ErrorMessage.failureToCreateExecutable();
		}
		
		if(runAfterCompile)
		{
			String[] miceArgs = {args[0]+".asm.out"}; 			
			try {
				mice.run(miceArgs);//run mice using our .asm.out file from mini
			} catch (IOException e) {
				ErrorMessage.failureToExecute();
			}//run mICE with the file created by mini
		}
	}

}
